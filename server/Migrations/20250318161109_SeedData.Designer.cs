// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    [Migration("20250318161109_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("server.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            Make = "Toyota",
                            Model = "Camry",
                            PricePerDay = 50.00m,
                            Status = 0,
                            Year = 2020
                        },
                        new
                        {
                            CarId = 2,
                            Make = "Honda",
                            Model = "Civic",
                            PricePerDay = 45.00m,
                            Status = 0,
                            Year = 2021
                        },
                        new
                        {
                            CarId = 3,
                            Make = "BMW",
                            Model = "X5",
                            PricePerDay = 80.00m,
                            Status = 2,
                            Year = 2022
                        },
                        new
                        {
                            CarId = 4,
                            Make = "Mercedes",
                            Model = "C-Class",
                            PricePerDay = 75.00m,
                            Status = 1,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("server.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "john@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "+1234567890"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "jane@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "+1234567891"
                        },
                        new
                        {
                            CustomerId = 3,
                            Email = "mike@example.com",
                            FirstName = "Mike",
                            LastName = "Johnson",
                            Phone = "+1234567892"
                        },
                        new
                        {
                            CustomerId = 4,
                            Email = "sarah@example.com",
                            FirstName = "Sarah",
                            LastName = "Williams",
                            Phone = "+1234567893"
                        });
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("RentalId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 250.00m,
                            PaymentDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 0,
                            RentalId = 1
                        },
                        new
                        {
                            PaymentId = 2,
                            Amount = 225.00m,
                            PaymentDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 2,
                            RentalId = 2
                        },
                        new
                        {
                            PaymentId = 3,
                            Amount = 375.00m,
                            PaymentDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 1,
                            RentalId = 3
                        },
                        new
                        {
                            PaymentId = 4,
                            Amount = 320.00m,
                            PaymentDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 0,
                            RentalId = 4
                        });
                });

            modelBuilder.Entity("server.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("RentalId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            RentalId = 1,
                            CarId = 1,
                            CustomerId = 1,
                            RentalEndDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 250.00m
                        },
                        new
                        {
                            RentalId = 2,
                            CarId = 2,
                            CustomerId = 2,
                            RentalEndDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 225.00m
                        },
                        new
                        {
                            RentalId = 3,
                            CarId = 4,
                            CustomerId = 3,
                            RentalEndDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 375.00m
                        },
                        new
                        {
                            RentalId = 4,
                            CarId = 3,
                            CustomerId = 4,
                            RentalEndDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 320.00m
                        });
                });

            modelBuilder.Entity("server.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            CarId = 1,
                            Comment = "Excellent car, very comfortable!",
                            CustomerId = 1,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            CarId = 2,
                            Comment = "Good car, but a bit small.",
                            CustomerId = 2,
                            Rating = 4
                        },
                        new
                        {
                            ReviewId = 3,
                            CarId = 4,
                            Comment = "Luxury car, amazing experience!",
                            CustomerId = 3,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 4,
                            CarId = 3,
                            Comment = "Car was in maintenance, but service was good.",
                            CustomerId = 4,
                            Rating = 3
                        });
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.HasOne("server.Models.Rental", "Rental")
                        .WithMany("Payments")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("server.Models.Rental", b =>
                {
                    b.HasOne("server.Models.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("server.Models.Review", b =>
                {
                    b.HasOne("server.Models.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("server.Models.Car", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("server.Models.Customer", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("server.Models.Rental", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
